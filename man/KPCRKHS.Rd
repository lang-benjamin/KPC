% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/KPC.R
\name{KPCRKHS}
\alias{KPCRKHS}
\title{Kernel partial correlation with RKHS method}
\usage{
KPCRKHS(Y, X = NULL, Z, ky, kx, kxz, eps, appro = FALSE, tol = 0.001)
}
\arguments{
\item{Y}{a matrix (n by dy)}

\item{X}{a matrix (n by dx) or \code{NULL} if \eqn{X} is empty}

\item{Z}{a matrix (n by dz)}

\item{ky}{a function \eqn{k(y, y')} of class \code{kernel}. It can be the kernel implemented in \code{kernlab} e.g. Gaussian kernel: \code{rbfdot(sigma = 1)}, linear kernel: \code{vanilladot()}. In practice, Gaussian kernel with empirical bandwidth \code{kernlab::rbfdot(1/(2*median(dist(Y))^2))} may be a good choice.}

\item{kx}{the kernel function for \eqn{X}}

\item{kxz}{the kernel function for \eqn{(X, Z)} or for \eqn{Z} if \eqn{X} is empty}

\item{eps}{a small positive regularization parameter for inverting the empirical cross-covariance operator}

\item{appro}{whether to use incomplete Cholesky decomposition for approximation}

\item{tol}{tolerance used for incomplete Cholesky decomposition (implemented by the function \code{inchol} in the package \code{kernlab})}
}
\description{
Compute estimate of Kernel partial correlation (KPC) coefficient using conditional mean embeddings in the reproducing kernel Hilbert spaces (RKHS).
}
\details{
The kernel partial correlation (KPC) coefficient measures the conditional dependency
between \eqn{Y} and \eqn{Z} given \eqn{X}, based on an i.i.d. sample of \eqn{(Y, Z, X)}.
It converges to the population quantity which is between 0 and 1.
A small value indicates low conditional dependency between \eqn{Y} and \eqn{Z} given \eqn{X}, and
a large value indicates stronger conditional dependence.
If \code{X = NULL}, it measures the unconditional dependency between \eqn{Y} and \eqn{Z}.
}
\examples{
n = 2000
set.seed(1)
x = rnorm(n)
z = rnorm(n)
y = x + z + rnorm(n,1,1)
library(kernlab)
k = vanilladot()
KPCRKHS(y, x, z, k, k, k, 1e-5/n^(0.4), appro = F)
# 0.4859424 (Population quantity = 0.5)
KPCRKHS(y, x, z, k, k, k, 1e-5/n^(0.4), appro = T, tol = 1e-5)
# 0.4859424 (Population quantity = 0.5)
}
